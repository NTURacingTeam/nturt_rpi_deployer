<launch>
    <!-- enviroment variable for rosout cosole format -->
    <env name="ROSCONSOLE_FORMAT" value="[${severity}] [${time}] [${node}]: ${message}"/>

    <!-- arguement for determining where to log to -->
    <arg name="output" default="log"/>

    <!-- node for sneding/receiving can signals using ros message -->
    <node pkg="socketcan_bridge" name="sockercan_bridge" type="socketcan_bridge_node" output="$(arg output)"/>

    <!-- node for recording ros message into a bag -->
    <include file="$(find nturt_bag_recorder)/launch/nturt_bag_recorder.launch"/>

    <!-- node for parsing can signal -->
    <include file="$(find nturt_can_parser)/launch/nturt_can_parser.launch"/>

    <!-- node for controlling the state of the car -->
    <node pkg="nturt_state_controller" name="nturt_state_controller" type="nturt_state_controller_node" output="$(arg output)"/>

    <!-- node for controlling the can signal sent to the inverter -->
    <node pkg="nturt_torque_controller" name="nturt_torque_controller" type="nturt_torque_controller_node" output="$(arg output)"/>

    <!-- node for recording gps signal -->
    <node pkg="nturt_gps" name="nturt_gps_node" type="nturt_gps_node.py" output="$(arg output)"/>

    <!-- node for sneding messages to remote server -->
    <include file="$(find nturt_push_to_control_tower)/launch/nturt_push_to_control_tower.launch"/>

    <!-- node for test if ros is working -->
    <node pkg="nturt_rpi_deployer" name="nturt_led_controller_node" type="nturt_led_controller_node" output="$(arg output)"/>
</launch>
